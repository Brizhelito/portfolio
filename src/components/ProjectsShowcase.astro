---
/**
 * ProjectsShowcase.astro
 * Recibe por props:
 * - title: string
 * - projects: Array<Project>
 * Donde Project tiene: title, featured, description, techs, image, imageAlt, demoUrl, repoUrl, detailsUrl, labels, credentials
 */
const { title, projects } = Astro.props;
---

<style>
.fadein-section {
  opacity: 0;
  transform: translateY(32px);
  transition: opacity 0.5s cubic-bezier(.4,0,.2,1), transform 0.5s cubic-bezier(.4,0,.2,1);
}
.fadein-section.visible {
  opacity: 1;
  transform: none;
}
/* Modal styles */
.project-modal-bg {
  background: rgba(30, 41, 59, 0.75);
}
@media (prefers-color-scheme: dark) {
  .project-modal-bg {
    background: rgba(2, 6, 23, 0.85);
  }
}
</style>

<!-- Alpine.js para controlar el modal de imágenes de proyectos -->
<script src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js" defer></script>

<section x-data="{ showModal: false, modalImg: '', modalAlt: '' }" x-cloak class="projects-section py-16 bg-slate-50 dark:bg-slate-900 fadein-section">
  <div class="max-w-6xl mx-auto px-4">
    <h2 class="text-3xl md:text-4xl font-bold text-blue-700 dark:text-blue-400 mb-10 text-center">{title}</h2>
    <div class="grid gap-8 md:grid-cols-2 lg:grid-cols-3">
      {projects.map((project: any, idx: number) => (
        <div class={`w-full rounded-xl shadow-lg bg-white dark:bg-slate-800 p-6 flex flex-col items-start hover:scale-[1.03] transition-transform focus:outline-none focus:ring-2 ${project.featured ? 'focus:ring-blue-400' : 'focus:ring-purple-400'}`} tabindex="0" style="position:relative;">
          <img src={project.image} alt={project.imageAlt} class="w-full h-40 object-cover rounded-lg mb-4 border border-slate-200 dark:border-slate-700 relative z-20 cursor-zoom-in transition-transform hover:scale-105" @click={`showModal = true; modalImg = '${project.image}'; modalAlt = '${project.imageAlt}'`} />
          <h3 class="text-xl font-semibold mb-2 text-slate-900 dark:text-slate-100 relative z-20 flex items-center gap-2">{project.title}
            {project.featured && (
              <span class="inline-flex items-center gap-1 bg-gradient-to-r from-blue-100 via-blue-200 to-blue-100 dark:from-blue-950 dark:via-blue-900 dark:to-blue-950 text-blue-700 dark:text-blue-200 px-2 py-0.5 rounded-full text-xs font-bold shadow-sm border border-blue-200 dark:border-blue-800">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-yellow-400" fill="currentColor" viewBox="0 0 20 20"><path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.286 3.967a1 1 0 00.95.69h4.175c.969 0 1.371 1.24.588 1.81l-3.38 2.455a1 1 0 00-.364 1.118l1.287 3.966c.3.922-.755 1.688-1.54 1.118l-3.38-2.454a1 1 0 00-1.175 0l-3.38 2.454c-.784.57-1.838-.196-1.54-1.118l1.287-3.966a1 1 0 00-.364-1.118L2.05 9.394c-.783-.57-.38-1.81.588-1.81h4.175a1 1 0 00.95-.69l1.286-3.967z"/></svg>
                {project.labels?.featured}
              </span>
            )}
          </h3>
          <p class="text-slate-600 dark:text-slate-300 mb-3 relative z-20 min-h-[48px]">{project.description}</p>
          <div class="flex flex-wrap gap-2 mb-3 relative z-20">
            {project.techs.map((tech: string, tIdx: number) => (
              <span class="bg-blue-100 dark:bg-blue-950 text-blue-700 dark:text-blue-300 px-2 py-0.5 rounded text-xs font-medium">{tech}</span>
            ))} 
          </div>
          <div class="flex gap-3 mt-auto relative z-20 flex-wrap">
            {project.demoUrl && (
              <a href={project.demoUrl} target="_blank" rel="noopener" class="inline-flex items-center gap-1 bg-blue-100 dark:bg-blue-950 text-blue-700 dark:text-blue-300 px-2 py-0.5 rounded text-xs font-semibold hover:underline focus:outline-none focus:ring-2 focus:ring-blue-400">
                {project.labels?.demo}
              </a>
            )}
            {project.detailsUrl && (
              <a href={project.detailsUrl} class="inline-flex items-center gap-1 bg-purple-100 dark:bg-purple-950 text-purple-700 dark:text-purple-300 px-2 py-0.5 rounded text-xs font-semibold hover:underline focus:outline-none focus:ring-2 focus:ring-purple-400">
                {project.labels?.details}
              </a>
            )}
            {project.repoUrl && (
              <a href={project.repoUrl} target="_blank" rel="noopener" class="inline-flex items-center gap-1 bg-slate-100 dark:bg-slate-700 text-blue-700 dark:text-blue-300 px-2 py-0.5 rounded text-xs font-semibold hover:underline focus:outline-none focus:ring-2 focus:ring-blue-400">
                {project.labels?.repo}
              </a>
            )}
          </div>
          {project.credentials && (
            <div class="mt-2 text-xs text-slate-600 dark:text-slate-300 relative z-20">
              {project.credentials.map((cred: any, cIdx: number) => (
                <div><span class="font-semibold">{cred.role}:</span> {cred.user} / <span class="font-mono">{cred.pass}</span></div>
              ))}
            </div>
          )}
        </div>
      ))}
        </div>
      </div>
    </div>
  </div>

  <!-- Modal de imagen de proyecto: visualización tipo carta -->
  <div x-show="showModal" x-transition class="fixed inset-0 flex items-center justify-center z-50 project-modal-bg backdrop-blur-sm" @click.self="showModal = false">
    <div class="relative w-screen h-auto m-0 p-0 bg-transparent flex flex-col items-center justify-center">
      <button @click="showModal = false" class="absolute top-4 right-6 text-slate-600 dark:text-slate-300 hover:text-blue-700 dark:hover:text-blue-400 bg-slate-100 dark:bg-slate-800 rounded-full p-2 shadow focus:outline-none focus:ring-2 focus:ring-blue-400 z-20" aria-label="Cerrar imagen">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" /></svg>
      </button>
      <img :src="modalImg" :alt="modalAlt" class="w-full h-auto max-h-[90vh] object-contain bg-white dark:bg-slate-900 border border-slate-200 dark:border-slate-700 transition-all duration-200 shadow-2xl rounded-none sm:rounded-lg" />
    </div>
  </div>
</section>

<script is:inline>
if (typeof window !== 'undefined') {
  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        entry.target.classList.add('visible');
      }
    });
  }, { threshold: 0.15 });
  document.querySelectorAll('.fadein-section').forEach(el => observer.observe(el));
}
</script>
